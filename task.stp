%{
#include <linux/sched.h>
#include <linux/list.h>
%}

function task_execname_by_pid:string (pid:long) %{
	struct task_struct *p;
	struct list_head *_p, *_n;

	list_for_each_safe(_p, _n, &current->tasks) {
		p = list_entry(_p, struct task_struct, tasks);
		if (p->pid == (int)STAP_ARG_pid)
		snprintf(STAP_RETVALUE, MAXSTRINGLEN, "%s", p->comm);
	}
%}

function task_stime_by_pid:string (pid:long) %{

	struct task_struct *p;
	struct list_head *_p, *_n;

	list_for_each_safe(_p, _n, &current->tasks) {
		p = list_entry(_p, struct task_struct, tasks);
		if (p->pid == (int)STAP_ARG_pid)
		snprintf(STAP_RETVALUE, MAXSTRINGLEN, "%ld", p->stime);
	}
%}

function task_utime_by_pid:string (pid:long) %{

	struct task_struct *p;
	struct list_head *_p, *_n;

	list_for_each_safe(_p, _n, &current->tasks) {
		p = list_entry(_p, struct task_struct, tasks);
		if (p->pid == (int)STAP_ARG_pid)
		snprintf(STAP_RETVALUE, MAXSTRINGLEN, "%ld", p->utime);
	}
%}

probe begin
{
	
	printf("process name  is %s, utime is %s, stime is %s\n", task_execname_by_pid(target()),task_utime_by_pid(target()), task_stime_by_pid(target()));
	exit();
}
